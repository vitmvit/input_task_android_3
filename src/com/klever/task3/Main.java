package com.klever.task3;

import com.klever.task3.model.Figure;
import com.klever.task3.model.Line;
import com.klever.task3.model.Point;
import com.klever.task3.service.FigureService;

import java.util.ArrayList;
import java.util.List;

/***********************************************************************************************************************
Проверка и оптимизация резов стекла

        Имеется станок ЧПУ для раскроя листов стекла. На него подаются прямоугольные листы стекла, и режущий инструмент
    станка (далее – резец), осуществляет процесс резки. Резец станка имеет 2 режима перемещения: “холостой ход”, когда
    он перемещается в поднятом состоянии; и “рабочий ход”, когда он перемещается и непосредственно режет стекло.

        Программирование работы станка осуществляется заданием списка отрезков, по которым происходит перемещение резца.
    Список отрезков включает в себя непосредственно входной набор отрезков и некоторые стороны фигур из входного набора
    фигур.

        Требуется реализовать алгоритм с функциями:
        - преобразования сторон фигур в отрезки с координатами в СКЛ;
        - поиска и исключения из списка отрезков, которые накладываются на другие отрезки;
        - оптимизации списка отрезков для уменьшения расстояния “холостого хода” резца.

        Алгоритм должен принимать в качестве входных параметров:
        - Список фигур – приведен в разделе “Входные данные для задачи 3”. Фигура описывается 4-мя точками на плоскости
    с координатами (X, Y), образующими четырёхугольник. Координаты точек фигуры даны в системе координат фигуры (СКФ).
    Положение фигуры на листе задаётся координатами начала системы координат фигуры (СКФ) в системе координат листа
    (СКЛ). Начало системы координат листа (СКЛ) совпадает с нижним левым углом листа.
        - Список отрезков на плоскости листа приведен в разделе “Входные данные для задачи 3”.Отрезки заданы двумя
    точками, точка определяется координатами X, Y (СКЛ).
        Примечание: все координаты целочисленные, все отрезки являются прямолинейными.

        Условия:
        Список отрезков передается на станок резки стекла. Для успешного и экономного выполнения операции резки стекла
    нужно соблюсти следующие условия:
        - стороны фигур должны быть преобразованы в отрезки и добавлены в общий список отрезков;
        - станок не должен дважды резать по одной линии. То есть исключить из списка отрезки, которые полностью
    накладываются на другие отрезки;
        - необходимо сократить расстояние “холостого хода” резца. То есть оставшиеся отрезки должны быть расположены в
    списке таким образом, чтобы начало следующего отрезка являлось ближайшей точкой к концу текущего отрезка. Для этого
    можно менять положение отрезков в списке и менять местами начальную и конечную точки подходящего отрезка.

        Пояснение
        Резец начинает движение из начала координат СКЛ (точка (0,0) совпадает с левым нижним углом листа) и двигается
    по прямой к начальной точке первого отрезка из
    списка в поднятом состоянии (“холостой ход”). В этой точке резец опускается и, двигаясь к конечной точке отрезка,
    прорезает стекло. Далее резец поднимается и перемещается по прямой к начальной точке следующего отрезка и т. д.

        Результат работы алгоритма:
        - Список отрезков, удовлетворяющий условиям и заданный координатами X1, Y1, X2, Y2 в СКЛ.

        Список отрезков:
        Каждая строка отдельный отрезок, заданный координатами X1, Y1, X2, Y2 в СКЛ:

     15, 0, 15, 3210
     0, 15, 6000, 15
     1500, 0, 1500, 3210
     15, 1015, 1500, 1015
     15, 2015, 1500, 2015
     15, 3015, 1500, 3015
     2550, 0, 2550, 3210
     1500, 1415, 2550, 1415
     1500, 2815, 2550, 2815
     3991, 0, 3991, 3210
     2550, 515, 3991, 515
     2550, 1015, 3991, 1015
     2550, 1515, 3991, 1515
     2550, 2015, 3991, 2015
     2550, 2765, 3991, 2765
     3250, 2015, 3250, 2765
     4789, 0, 4789, 3210
     3991, 1515, 4789, 1515
     3991, 3015, 4789, 3015
     5843, 0, 5843, 3210
     4789, 1123, 5843, 1123
     5316, 15, 5316, 1123

        Список фигур. Каждая фигура описана 4-мя точками (X, Y) в СКФ

     Фигура 1:
     4 точки фигуры:
     0, 0
     1470, 0
     1200, 1000
     0, 1000
     Положение фигуры в СКЛ:
     15, 15
     Фигура 2:
     4 точки фигуры:
     0, 0
     1470, 0
     1200, 1000
     0, 1000
     Положение фигуры в СКЛ:
     15, 1015

     Фигура 3:
     4 точки фигуры:
     15, 0
     1485, 0
     1485, 1000
     285, 1000
     Положение фигуры в СКЛ:
     15, 2015
     Фигура 4:
     4 точки фигуры:
     0, 0
     798, 0
     798, 1485
     0, 1000
     Положение фигуры в СКЛ:
     3991, 15
     Фигура 5:
     4 точки фигуры:
     0, 0
     798, 0
     798, 1200
     0, 1485
     Положение фигуры в СКЛ:
     3991, 1515
     Фигура 6:
     4 точки фигуры:
     15, 0
     685, 0
     600, 735
     150, 735
     Положение фигуры в СКЛ:
     2550, 2015

***********************************************************************************************************************/
public class Main {

    private static final List<Figure> figureList;
    private static final List<Line> lineList;

    static {
        figureList = List.of(
                new Figure(
                        new Point(0, 0),
                        new Point(1470, 0),
                        new Point(1200, 1000),
                        new Point(0, 1000),
                        new Point(15, 15)
                ),
                new Figure(
                        new Point(0, 0),
                        new Point(1470, 0),
                        new Point(1200, 1000),
                        new Point(0, 1000),
                        new Point(15, 1015)
                ),
                new Figure(
                        new Point(15, 0),
                        new Point(1485, 0),
                        new Point(1485, 1000),
                        new Point(285, 1000),
                        new Point(15, 2015)
                ),
                new Figure(
                        new Point(0, 0),
                        new Point(798, 0),
                        new Point(798, 1485),
                        new Point(0, 1000),
                        new Point(3991, 15)
                ),
                new Figure(
                        new Point(0, 0),
                        new Point(798, 0),
                        new Point(798, 1200),
                        new Point(0, 1485),
                        new Point(3991, 1515)
                ),
                new Figure(
                        new Point(15, 0),
                        new Point(685, 0),
                        new Point(600, 735),
                        new Point(150, 735),
                        new Point(2550, 2015)
                )
        );
    }

    static {
        lineList = List.of(
                new Line(new Point(15, 0), new Point(15, 3210)),
                new Line(new Point(0, 15), new Point(6000, 15)),
                new Line(new Point(1500, 0), new Point(1500, 3210)),
                new Line(new Point(15, 1015), new Point(1500, 1015)),
                new Line(new Point(15, 2015), new Point(1500, 2015)),
                new Line(new Point(15, 3015), new Point(1500, 3015)),
                new Line(new Point(2550, 0), new Point(2550, 3210)),
                new Line(new Point(1500, 1415), new Point(2550, 1415)),
                new Line(new Point(1500, 2815), new Point(2550, 2815)),
                new Line(new Point(3991, 0), new Point(3991, 3210)),
                new Line(new Point(2550, 515), new Point(3991, 515)),
                new Line(new Point(2550, 1015), new Point(3991, 1015)),
                new Line(new Point(2550, 1515), new Point(3991, 1515)),
                new Line(new Point(2550, 2015), new Point(3991, 2015)),
                new Line(new Point(2550, 2765), new Point(3991, 2765)),
                new Line(new Point(3250, 2015), new Point(3250, 2765)),
                new Line(new Point(4789, 0), new Point(4789, 3210)),
                new Line(new Point(3991, 1515), new Point(4789, 1515)),
                new Line(new Point(3991, 3015), new Point(4789, 3015)),
                new Line(new Point(5843, 0), new Point(5843, 3210)),
                new Line(new Point(4789, 1123), new Point(5843, 1123)),
                new Line(new Point(5316, 15), new Point(5316, 1123))
        );
    }

    public static void main(String[] args) {

        FigureService figureService = new FigureService();

        for (Figure figure : figureList) {  //смещение фигур из скф и скл
         figureService.offset(figure);
        }

        List<Line> list = new ArrayList<>(figureList.size() * 4 + lineList.size()); //разбиение фигур на линии
        for (Figure figure : figureList) {
            list.addAll(figure.toLines());
        }
        list.addAll(lineList);

        List<Line> compactLinesList = figureService.compactLines(list); //слияние отрезков

        figureService.sortLines(compactLinesList); //сортировка по минимальному расстоянию
        compactLinesList.forEach(System.out::println);
    }
}




